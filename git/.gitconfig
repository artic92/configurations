# This is Git's per-user configuration file.
[user]
  name = Antonio Riccio
  email = antonio.riccio@exploration.space
[alias]
  # List available aliases (not working)
  aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
  # Command shortcuts
  f = fetch
  ci = commit
  co = checkout
  st = status
  br = branch
  cp = cherry-pick
  rb = rebase
  rbi = rebase -i
  rbir = rebase -i --root
  rbc = rebase --continue
  rba = rebase --abort
  bra = branch -a
  sta = stash
  stl = stash list
  df = diff --color-words='[^[:space:]]'
  sh = show --color-words='[^[:space:]]'
  # Reuse the last dropped commit message
  rci = commit -C HEAD@{1}
  # Display tree-like log
  lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
  # Useful when you have to update your last commit
  # with staged files without editing the commit message.
  oops = commit --amend --no-edit
  # Ensure that force-pushing won't lose someone else's work (only mine).
  push-with-lease = push --force-with-lease
  # List local commits that were not pushed to remote repository
  review-local = "!git lg @{push}.."
  # Edit last commit message
  reword = commit --amend
  # Undo last commit but keep changed files in stage
  uncommit = reset --soft HEAD~1
  # Remove files from staging area
  unstage = reset HEAD --
[core]
  # Global ignore file (not shared)
  excludesfile = ~/.gitignore_global
  # VSCode
  # editor = code --wait
  # Vim
  editor = vim
  # Don't consider trailing space change as a cause for merge conflicts
  # whitespace = -trailing-space
  # Treats trailing whitespaces at the end of the line as an error
  whitespace = -blank-at-eol
[diff]
  # Use better, descriptive initials (c, i, w) instead of a/b.
  mnemonicPrefix = true
  # Show renames/moves as such
  renames = true
  # Use VSCode as default diff tool when running `git diff-tool`
  tool = vscode
  # Use vimdiff as default diff tool when running `git diff-tool`
  # tool = vimdiff
[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE
[grep]
  break = true
  heading = true
  lineNumber = true
  # Consider most regexes to be ERE
  extendedRegexp = true
[log]
  # Use abbrev SHAs whenever possible/relevant instead of full 40 chars
  abbrevCommit = true
[color "branch"]
  # Blue on black is hard to read in git branch -vv: use cyan instead
  upstream = cyan
[tag]
  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
  sort = version:refname
[pull]
	rebase = true
[credential]
	helper = cache --timeout=3600
